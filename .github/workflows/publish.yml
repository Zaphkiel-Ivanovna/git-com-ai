name: üöÄ Publish VS Code Extension

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'üìù Version to publish (e.g., 1.0.0)'
        required: true
        type: string
  
  push:
    branches:
      - main

jobs:
  build:
    name: üî® Build & Test
    runs-on: ubuntu-latest
    steps:
      - name: ‚úÖ Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          
      - name: üîç Install dependencies
        run: npm ci
        
      - name: üß™ Run tests
        run: npm test
        
      - name: üìÑ Lint code
        run: npm run lint
        
      - name: üîß Build extension
        run: npm run build
        
      - name: üì§ Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: extension-package
          path: '*.vsix'
          if-no-files-found: error

  security-scan:
    name: üõ°Ô∏è Security Scan
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: ‚úÖ Checkout code
        uses: actions/checkout@v4
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          
      - name: üîç Install dependencies
        run: npm ci
        
      - name: üîí Run npm audit
        run: npm audit --audit-level=high || true
        
      - name: üîç Run CodeQL Analysis
        uses: github/codeql-action/analyze@v3
        with:
          languages: javascript, typescript

  update-version:
    name: üîÑ Update Version
    runs-on: ubuntu-latest
    needs: [build, security-scan]
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: ‚úÖ Checkout code
        uses: actions/checkout@v4
        
      - name: üìù Update package.json version
        run: |
          # Get current version from package.json
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "Current version in package.json: $CURRENT_VERSION"
          echo "Version to set: ${{ github.event.inputs.version }}"
          
          # Update version in package.json
          sed -i 's/"version": "'$CURRENT_VERSION'"/"version": "${{ github.event.inputs.version }}"/' package.json
          
          # Verify update
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "Updated version in package.json: $NEW_VERSION"
          
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          
      - name: üîç Install dependencies
        run: npm ci
          
      - name: üîß Rebuild with new version
        run: npm run build
        
      - name: üì§ Upload updated artifacts
        uses: actions/upload-artifact@v4
        with:
          name: updated-extension-package
          path: '*.vsix'
          if-no-files-found: error
          
      - name: üíæ Commit version changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add package.json
          git commit -m "üîñ Bump version to ${{ github.event.inputs.version }}"
          git push

  publish:
    name: üì¢ Publish to Marketplace
    runs-on: ubuntu-latest
    needs: update-version
    if: github.event_name == 'workflow_dispatch'
    steps:
      - name: ‚úÖ Checkout code
        uses: actions/checkout@v4
        with:
          ref: main
        
      - name: üì¶ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'npm'
          
      - name: üì• Download updated build artifacts
        uses: actions/download-artifact@v4
        with:
          name: updated-extension-package
          
      - name: üìù Get Release Info
        id: release-info
        run: |
          VERSION="${{ github.event.inputs.version }}"
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Extract release notes from CHANGELOG.md if available
          if grep -q "## $VERSION" CHANGELOG.md; then
            RELEASE_NOTES=$(cat CHANGELOG.md | sed -n "/## $VERSION/,/## /p" | sed '1d;$d')
          else
            RELEASE_NOTES="Release version $VERSION"
          fi
          
          echo "notes<<EOF" >> $GITHUB_OUTPUT
          echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: üöÄ Publish to Visual Studio Marketplace
        uses: HaaLeo/publish-vscode-extension@v2
        with:
          pat: ${{ secrets.VSCE_PAT }}
          registryUrl: https://marketplace.visualstudio.com
          
      - name: üè∑Ô∏è Create Git Tag
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git tag -a "v${{ github.event.inputs.version }}" -m "Release v${{ github.event.inputs.version }}"
          git push origin "v${{ github.event.inputs.version }}"
          
      - name: üì¢ Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ github.event.inputs.version }}"
          name: "üöÄ Release v${{ github.event.inputs.version }}"
          body: ${{ steps.release-info.outputs.notes }}
          files: "*.vsix"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
